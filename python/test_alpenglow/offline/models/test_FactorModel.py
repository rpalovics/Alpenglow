import alpenglow as prs
from alpenglow.offline.models import FactorModel
from alpenglow.offline.evaluation import NdcgScore
import alpenglow.Getter as rs
import pandas as pd
import numpy as np
import unittest
import pytest
import sys
import alpenglow.cpp
compiler = alpenglow.cpp.__compiler
stdlib = alpenglow.cpp.__stdlib

class TestFactorModel(unittest.TestCase):
    def test_rmse(self):
        data = pd.read_csv(
            "python/test_alpenglow/test_data_4",
            sep=' ',
            header=None,
            names=['time', 'user', 'item', 'id', 'score', 'eval']
        )
        model = FactorModel(
            factor_seed=254938879,
            negative_rate=9,
            number_of_iterations=20,
        )
        model.fit(data)

        def predict(model, user, item):
            rd = rs.RecDat()
            rd.user = user
            rd.item = item
            return model.prediction(rd)

        errors = [(1 - predict(model.model, u, i))**2 for (u, i) in data[['user', 'item']].values]
        rmse = np.sqrt(pd.Series(errors)).mean()
        assert rmse == pytest.approx(0.31249014160992433, abs=1e-2)

    def test_ranking(self):
        data = pd.read_csv(
            "python/test_alpenglow/test_data_4",
            sep=' ',
            header=None,
            names=['time', 'user', 'item', 'id', 'score', 'eval']
        )
        exp = FactorModel(
            factor_seed=254938879,
            negative_rate=9,
            number_of_iterations=20,
        )
        exp.fit(data)
        preds = exp.recommend(exclude_known=False, k=20)
        if(compiler == "gcc" and stdlib == "libstdc++"):
            print(preds['item'].tolist())
            assert preds['item'].tolist() ==  \
                 [94, 166, 30, 225, 98, 299, 300, 442, 372, 337, 196, 455, 338, 462, 256, 250, 429, 36, 496, 38, 338, 256, 372, 455, 98, 94, 282, 166, 177, 383, 462, 30, 128, 102, 337, 168, 225, 479, 69, 120, 94, 98, 300, 166, 30, 299, 225, 196, 442, 455, 427, 429, 293, 250, 38, 247, 255, 372, 496, 337, 94, 30, 166, 225, 299, 442, 300, 98, 372, 337, 196, 496, 250, 215, 462, 40, 36, 338, 429, 62, 94, 30, 166, 225, 300, 299, 442, 98, 196, 372, 337, 250, 455, 462, 204, 429, 496, 247, 256, 38, 94, 300, 204, 86, 165, 128, 166, 247, 30, 225, 196, 383, 256, 462, 102, 442, 497, 429, 337, 299, 94, 300, 30, 166, 225, 204, 196, 462, 299, 337, 442, 165, 86, 372, 250, 455, 247, 256, 102, 98, 30, 94, 166, 225, 299, 442, 300, 98, 196, 372, 337, 215, 250, 462, 496, 36, 40, 429, 338, 455, 94, 30, 166, 225, 300, 299, 442, 98, 196, 337, 250, 462, 372, 204, 215, 496, 40, 429, 455, 256, 94, 166, 256, 30, 372, 225, 462, 338, 383, 455, 337, 98, 102, 442, 36, 282, 128, 247, 177, 168, 94, 30, 166, 225, 299, 300, 442, 372, 98, 196, 462, 455, 337, 250, 215, 36, 496, 338, 429, 256, 30, 94, 225, 166, 300, 299, 442, 196, 462, 337, 250, 372, 204, 215, 98, 496, 429, 455, 247, 36, 30, 94, 225, 166, 299, 300, 442, 196, 372, 337, 98, 462, 250, 215, 496, 36, 455, 40, 429, 338, 383, 338, 444, 97, 168, 165, 4, 255, 128, 483, 98, 277, 436, 330, 372, 6, 156, 122, 40, 464, 94, 300, 30, 166, 225, 299, 196, 442, 98, 204, 250, 337, 462, 372, 455, 429, 247, 86, 165, 496, 30, 94, 166, 225, 299, 442, 300, 98, 372, 337, 196, 462, 215, 250, 496, 36, 338, 455, 40, 256, 94, 166, 256, 455, 247, 128, 98, 30, 300, 102, 225, 462, 383, 204, 282, 372, 177, 196, 86, 375, 94, 30, 166, 300, 225, 98, 299, 196, 442, 337, 204, 455, 250, 372, 462, 256, 429, 247, 38, 427, 94, 30, 166, 300, 225, 299, 196, 442, 98, 455, 204, 337, 462, 250, 372, 429, 256, 247, 215, 38, 94, 30, 166, 225, 299, 300, 98, 442, 196, 337, 372, 455, 462, 250, 215, 496, 204, 429, 338, 256, 300, 94, 98, 429, 427, 250, 204, 299, 196, 166, 371, 255, 165, 442, 496, 38, 86, 450, 30, 266, 94, 30, 166, 225, 300, 299, 442, 196, 250, 337, 462, 204, 98, 372, 215, 496, 429, 40, 165, 455, 30, 225, 300, 462, 166, 94, 299, 442, 215, 204, 196, 372, 165, 86, 383, 337, 250, 452, 81, 102, 98, 338, 94, 120, 166, 97, 40, 256, 30, 225, 299, 156, 337, 442, 255, 414, 444, 325, 496, 62, 94, 30, 166, 225, 300, 462, 372, 442, 196, 299, 455, 247, 337, 98, 256, 383, 204, 128, 102, 86, 94, 166, 30, 225, 372, 299, 455, 462, 247, 383, 442, 36, 98, 300, 196, 256, 177, 215, 128, 102, 94, 30, 166, 225, 300, 299, 442, 462, 372, 196, 337, 98, 455, 256, 204, 247, 250, 383, 128, 86, 94, 30, 166, 225, 299, 372, 442, 98, 300, 462, 455, 337, 196, 36, 338, 215, 256, 247, 250, 177, 30, 299, 94, 166, 225, 442, 300, 98, 372, 215, 196, 337, 496, 250, 462, 36, 40, 429, 338, 255, 94, 30, 166, 300, 225, 299, 196, 442, 98, 337, 250, 204, 462, 372, 455, 429, 247, 496, 256, 86, 94, 30, 166, 225, 299, 300, 442, 196, 98, 250, 337, 496, 372, 429, 462, 215, 204, 40, 36, 455, 94, 166, 30, 225, 300, 98, 455, 256, 196, 204, 462, 337, 372, 247, 442, 299, 128, 102, 86, 165, 30, 94, 166, 225, 299, 442, 300, 98, 337, 372, 196, 250, 496, 215, 40, 462, 338, 36, 429, 255, 94, 30, 166, 225, 299, 300, 98, 442, 196, 250, 337, 372, 496, 429, 455, 462, 255, 427, 215, 204, 94, 300, 30, 166, 225, 196, 204, 455, 299, 98, 442, 337, 462, 250, 372, 86, 165, 256, 247, 38, 30, 94, 166, 225, 299, 442, 337, 372, 300, 98, 338, 462, 215, 196, 496, 36, 40, 250, 120, 256, 94, 30, 166, 225, 98, 299, 372, 442, 337, 338, 256, 462, 300, 455, 36, 196, 120, 215, 40, 444, 455, 427, 300, 204, 247, 128, 98, 94, 38, 86, 375, 196, 165, 177, 468, 371, 450, 293, 282, 266, 299, 30, 94, 300, 225, 442, 166, 196, 98, 250, 496, 372, 455, 215, 429, 293, 255, 36, 292, 25, 94, 166, 30, 225, 300, 98, 299, 442, 196, 455, 337, 372, 250, 429, 462, 204, 247, 38, 256, 427, 94, 30, 166, 225, 299, 442, 300, 337, 98, 372, 462, 196, 338, 250, 215, 40, 496, 256, 36, 455, 94, 30, 166, 225, 299, 300, 442, 98, 372, 196, 337, 462, 455, 250, 256, 338, 215, 36, 496, 429, 94, 30, 166, 225, 299, 300, 442, 98, 337, 372, 196, 462, 250, 215, 496, 455, 36, 338, 40, 429, 299, 30, 225, 442, 166, 94, 215, 496, 98, 372, 300, 40, 337, 250, 36, 338, 444, 196, 120, 255, 299, 30, 338, 442, 166, 225, 120, 94, 40, 215, 36, 496, 98, 444, 337, 372, 97, 255, 414, 462, 94, 30, 166, 225, 299, 300, 442, 98, 372, 196, 337, 462, 250, 455, 215, 496, 36, 338, 256, 429, 300, 204, 94, 30, 196, 225, 166, 165, 337, 455, 86, 462, 102, 256, 250, 375, 177, 372, 38, 197, 30, 94, 166, 225, 300, 299, 442, 462, 337, 196, 204, 372, 98, 250, 215, 455, 256, 496, 40, 429, 94, 30, 166, 225, 300, 462, 372, 299, 442, 337, 196, 98, 256, 455, 204, 250, 215, 36, 247, 338, 30, 94, 225, 166, 299, 442, 300, 372, 337, 462, 215, 196, 98, 250, 496, 36, 40, 338, 429, 455, 94, 166, 30, 225, 300, 98, 299, 442, 196, 372, 337, 455, 462, 250, 247, 429, 256, 128, 496, 204, 30, 94, 166, 225, 299, 442, 98, 372, 338, 337, 300, 215, 36, 496, 462, 196, 40, 120, 250, 444, 94, 30, 166, 225, 299, 300, 442, 372, 98, 337, 196, 462, 250, 455, 215, 36, 338, 496, 256, 40, 256, 102, 455, 94, 383, 128, 462, 247, 282, 204, 166, 177, 375, 86, 372, 30, 337, 165, 225, 98, 30, 94, 300, 225, 166, 204, 462, 165, 86, 196, 299, 337, 383, 442, 102, 256, 372, 452, 247, 215, 30, 166, 225, 338, 94, 299, 442, 40, 120, 337, 98, 372, 496, 215, 36, 97, 444, 256, 462, 62, 94, 30, 166, 225, 300, 299, 442, 196, 98, 372, 337, 250, 462, 455, 204, 429, 247, 496, 256, 215, 94, 30, 166, 225, 299, 300, 442, 98, 372, 337, 196, 462, 250, 455, 215, 496, 36, 338, 256, 204, 30, 94, 299, 166, 225, 442, 300, 98, 196, 337, 250, 496, 372, 215, 40, 429, 462, 36, 338, 255, 94, 166, 30, 98, 225, 299, 300, 442, 372, 337, 196, 455, 338, 250, 256, 462, 429, 496, 36, 38, 94, 30, 166, 225, 299, 300, 442, 98, 196, 372, 337, 250, 496, 462, 215, 429, 455, 36, 338, 40, 94, 30, 166, 225, 299, 98, 300, 442, 372, 337, 196, 455, 462, 250, 338, 256, 429, 36, 496, 215, 94, 30, 166, 225, 299, 300, 442, 98, 372, 196, 337, 462, 455, 250, 215, 36, 256, 338, 496, 429, 94, 30, 166, 225, 300, 299, 196, 442, 337, 462, 204, 455, 372, 250, 98, 215, 256, 429, 86, 165, 299, 30, 98, 94, 225, 166, 442, 496, 338, 255, 444, 372, 250, 300, 215, 196, 120, 292, 36, 455]

        assert NdcgScore(data, preds, top_k=20) == pytest.approx(0.6862576799209609, abs=5*1e-3)

        preds2 = exp.recommend(users = [1, 2], exclude_known=False)
        assert preds2['user'].unique().tolist() == [1,2]

        preds = exp.recommend(exclude_known=True)
        joined_preds = preds.join(
            data.set_index(['user', 'item']),
            on=['user','item'], how='inner', rsuffix="_right"
        )
        assert len(joined_preds) == 0
