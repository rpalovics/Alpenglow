import alpenglow.components.PopularityComponent
import alpenglow.components.TransitionProbabilityComponent
import alpenglow.components.CombinedComponent
import alpenglow.components.OnlineExperimentComponent
import alpenglow.Getter as cpp
import pandas as pd

class TestOnlineExperimentComponent:
    def test_component(self):
        """Usage example and actual test of CombinedComponent."""
        #base recommender 1: transition
        recommender1 = alpenglow.components.TransitionProbabilityComponent(
          mode="inverted"
        )
        recommender1.build()
        model1 = recommender1.get_object("model")
        updater1 = recommender1.get_object("updater")

        #base recommender 2: poptf
        recommender2 = alpenglow.components.PopularityComponent()
        updater2 = cpp.PopularityTimeFrameModelUpdater(
            tau = 600
        )
        recommender2.set_object("updater",updater2)
        recommender2.build()
        model2 = recommender2.get_object("model")

        #recommender: combined model
        recommender = alpenglow.components.CombinedComponent(
            #model
            log_frequency=0, #no logging
            use_user_weights=False,
            #negative sample generator
            negative_rate = 10,
            #gradient updater
            learning_rate = 0.05,
        )
        recommender.add_base_model(model1)
        recommender.add_base_model(model2)
        recommender.build()
        model = recommender.get_object("model")
        updater = recommender.get_object("negative_sample_generator")

        #online_experiment
        experiment = alpenglow.components.OnlineExperimentComponent(
            top_k = 100,
            seed = 254938879,
        )
        experiment.set_model(model)
        experiment.add_updater(updater)
        experiment.add_updater(updater1)
        experiment.add_updater(updater2)
        experiment.build()

        data = pd.read_csv(
            "python/test_alpenglow/test_data_4",
            sep=' ',
            header=None,
            names=['time', 'user', 'item', 'id', 'score', 'eval']
        )
        rankings = experiment.run(data, verbose=True, exclude_known=True)
        assert rankings.top_k == 100
        desired_ranks = [101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 5.0, 101.0, 101.0, 2.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 1.0, 101.0, 101.0, 3.0, 101.0, 101.0, 13.0, 1.0, 101.0, 101.0, 101.0, 28.0, 23.0, 101.0, 101.0, 101.0, 101.0, 101.0, 7.0, 2.0, 3.0, 101.0, 101.0, 4.0, 4.0, 11.0, 13.0, 101.0, 101.0, 10.0, 101.0, 31.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 19.0, 101.0, 2.0, 4.0, 11.0, 101.0, 101.0, 11.0, 101.0, 101.0, 101.0, 7.0, 101.0, 3.0, 101.0, 8.0, 101.0, 101.0, 14.0, 3.0, 101.0, 2.0, 3.0, 101.0, 16.0, 43.0, 101.0, 101.0, 101.0, 101.0, 14.0, 101.0, 48.0, 10.0, 4.0, 15.0, 101.0, 56.0, 9.0, 29.0, 1.0, 101.0, 6.0, 35.0, 101.0, 101.0, 101.0, 5.0, 6.0, 8.0, 1.0, 101.0, 4.0, 1.0, 101.0, 101.0, 2.0, 1.0, 17.0, 101.0, 101.0, 13.0, 5.0, 38.0, 101.0, 13.0, 26.0, 37.0, 101.0, 11.0, 64.0, 4.0, 101.0, 1.0, 101.0, 101.0, 59.0, 16.0, 20.0, 17.0, 2.0, 13.0, 5.0, 39.0, 9.0, 101.0, 101.0, 3.0, 101.0, 1.0, 7.0, 101.0, 7.0, 101.0, 101.0, 13.0, 10.0, 40.0, 15.0, 3.0, 101.0, 9.0, 101.0, 101.0, 59.0, 3.0, 101.0, 101.0, 101.0, 15.0, 101.0, 4.0, 8.0, 101.0, 2.0, 101.0, 101.0, 101.0, 66.0, 15.0, 101.0, 101.0, 18.0, 101.0, 1.0, 101.0, 2.0, 15.0, 53.0, 4.0, 101.0, 5.0, 11.0, 49.0, 101.0, 11.0, 2.0, 21.0, 7.0, 14.0, 10.0, 101.0, 101.0, 101.0, 101.0, 12.0, 101.0, 10.0, 4.0, 3.0, 101.0, 14.0, 15.0, 101.0, 1.0, 7.0, 3.0, 101.0, 14.0, 101.0, 101.0, 42.0, 101.0, 32.0, 1.0, 17.0, 30.0, 101.0, 1.0, 4.0, 27.0, 101.0, 6.0, 9.0, 44.0, 101.0, 101.0, 101.0, 101.0, 101.0, 10.0, 19.0, 101.0, 61.0, 30.0, 16.0, 6.0, 1.0, 101.0, 101.0, 6.0, 15.0, 101.0, 101.0, 101.0, 101.0, 10.0, 2.0, 9.0, 19.0, 101.0, 2.0, 101.0, 101.0, 3.0, 4.0, 7.0, 101.0, 39.0, 17.0, 101.0, 101.0, 9.0, 5.0, 2.0, 101.0, 8.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 14.0, 101.0, 18.0, 3.0, 2.0, 101.0, 101.0, 7.0, 101.0, 3.0, 7.0, 39.0, 101.0, 101.0, 45.0, 101.0, 101.0, 101.0, 101.0, 101.0, 2.0, 10.0, 63.0, 17.0, 2.0, 51.0, 27.0, 25.0, 101.0, 101.0, 101.0, 101.0, 15.0, 101.0, 11.0, 101.0, 21.0, 101.0, 1.0, 101.0, 63.0, 2.0, 5.0, 74.0, 101.0, 16.0, 12.0, 20.0, 6.0, 101.0, 101.0, 4.0, 101.0, 28.0, 11.0, 101.0, 1.0, 9.0, 7.0, 76.0, 19.0, 7.0, 21.0, 101.0, 7.0, 101.0, 8.0, 101.0, 101.0, 1.0, 21.0, 10.0, 43.0, 101.0, 1.0, 65.0, 7.0, 101.0, 34.0, 3.0, 15.0, 101.0, 69.0, 4.0, 101.0, 3.0, 6.0, 101.0, 5.0, 101.0, 101.0, 2.0, 5.0, 101.0, 20.0, 101.0, 9.0, 16.0, 101.0, 43.0, 7.0, 1.0, 101.0, 67.0, 29.0, 14.0, 5.0, 101.0, 101.0, 11.0, 101.0, 101.0, 44.0, 101.0, 101.0, 3.0, 49.0, 49.0, 29.0, 101.0, 21.0, 101.0, 101.0, 21.0, 3.0, 101.0, 15.0, 101.0, 101.0, 101.0, 101.0, 101.0, 3.0, 4.0, 101.0, 10.0, 23.0, 101.0, 101.0, 101.0, 14.0, 101.0, 101.0, 101.0, 101.0, 101.0, 8.0, 35.0, 22.0, 101.0, 3.0, 7.0, 101.0, 7.0, 6.0, 44.0, 101.0, 6.0, 4.0, 101.0, 2.0, 8.0, 4.0, 4.0, 101.0, 101.0, 12.0, 36.0, 59.0, 47.0, 101.0, 101.0, 101.0, 56.0, 101.0, 2.0, 11.0, 31.0, 7.0, 101.0, 101.0, 101.0, 25.0, 3.0, 19.0, 3.0, 37.0, 101.0, 1.0, 101.0, 6.0, 101.0, 37.0, 50.0, 101.0, 1.0, 101.0, 101.0, 101.0, 3.0, 101.0, 101.0, 101.0, 101.0, 101.0, 5.0, 101.0, 101.0, 9.0, 101.0, 101.0, 101.0, 101.0, 38.0, 101.0, 101.0, 4.0, 67.0, 18.0, 47.0, 101.0, 8.0, 101.0, 101.0, 101.0, 23.0, 101.0, 5.0, 101.0, 101.0, 10.0, 101.0, 101.0, 9.0, 13.0, 54.0, 101.0, 28.0, 101.0, 1.0, 12.0, 18.0, 14.0, 101.0, 4.0, 45.0, 57.0, 1.0, 101.0, 2.0, 101.0, 101.0, 31.0, 4.0, 101.0, 1.0, 7.0, 101.0, 101.0, 101.0, 16.0, 14.0, 101.0, 3.0, 101.0, 101.0, 57.0, 20.0, 13.0, 41.0, 101.0, 52.0, 101.0, 18.0, 101.0, 101.0, 30.0, 20.0, 101.0, 101.0, 101.0, 101.0, 1.0, 101.0, 48.0, 101.0, 14.0, 17.0, 101.0, 8.0, 101.0, 101.0, 101.0, 101.0, 8.0, 101.0, 101.0, 101.0, 46.0, 101.0, 101.0, 101.0, 5.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 43.0, 20.0, 101.0, 5.0, 101.0, 1.0, 36.0, 21.0, 7.0, 101.0, 14.0, 101.0, 21.0, 101.0, 101.0, 51.0, 23.0, 2.0, 101.0, 101.0, 101.0, 12.0, 7.0, 101.0, 27.0, 101.0, 55.0, 54.0, 101.0, 101.0, 101.0, 46.0, 6.0, 3.0, 101.0, 7.0, 101.0, 101.0, 101.0, 46.0, 12.0, 22.0, 10.0, 1.0, 44.0, 101.0, 101.0, 101.0, 101.0, 1.0, 19.0, 1.0, 101.0, 101.0, 30.0, 56.0, 29.0, 101.0, 101.0, 29.0, 101.0, 101.0, 13.0, 101.0, 13.0, 61.0, 17.0, 71.0, 60.0, 1.0, 11.0, 18.0, 10.0, 4.0, 101.0, 14.0, 20.0, 101.0, 101.0, 2.0, 101.0, 6.0, 101.0, 46.0, 2.0, 7.0, 101.0, 22.0, 12.0, 101.0, 101.0, 101.0, 101.0, 11.0, 62.0, 21.0, 101.0, 56.0, 9.0, 7.0, 6.0, 101.0, 43.0, 101.0, 101.0, 19.0, 21.0, 101.0, 101.0, 4.0, 6.0, 101.0, 101.0, 52.0, 101.0, 61.0, 14.0, 3.0, 10.0, 45.0, 6.0, 101.0, 101.0, 101.0, 16.0, 20.0, 101.0, 101.0, 31.0, 2.0, 10.0, 101.0, 8.0, 51.0, 10.0, 15.0, 101.0, 101.0, 7.0, 101.0, 10.0, 101.0, 101.0, 61.0, 101.0, 101.0, 25.0, 23.0, 101.0, 101.0, 101.0, 101.0, 20.0, 59.0, 5.0, 101.0, 23.0, 1.0, 101.0, 41.0, 6.0, 12.0, 1.0, 101.0, 101.0, 13.0, 12.0, 78.0, 8.0, 101.0, 45.0, 9.0, 101.0, 101.0, 4.0, 38.0, 18.0, 101.0, 53.0, 6.0, 101.0, 101.0, 16.0, 1.0, 6.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 6.0, 4.0, 17.0, 101.0, 10.0, 2.0, 8.0, 30.0, 10.0, 101.0, 38.0, 101.0, 33.0, 1.0, 2.0, 17.0, 61.0, 9.0, 4.0, 101.0, 11.0, 18.0, 101.0, 1.0, 18.0, 52.0, 101.0, 3.0, 45.0, 101.0, 1.0, 101.0, 3.0, 5.0, 101.0, 101.0, 101.0, 101.0, 10.0, 101.0, 1.0, 101.0, 59.0, 17.0, 101.0, 101.0, 28.0, 3.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 6.0, 21.0, 9.0, 28.0, 101.0, 101.0, 56.0, 13.0, 14.0, 10.0, 3.0, 6.0, 24.0, 101.0, 49.0, 101.0, 101.0, 50.0, 8.0, 22.0, 23.0, 56.0, 101.0, 101.0, 101.0, 101.0, 3.0, 23.0, 10.0, 101.0, 23.0, 101.0, 22.0, 101.0, 101.0, 6.0, 25.0, 19.0, 101.0, 1.0, 8.0, 29.0, 49.0, 3.0, 5.0, 8.0, 101.0, 101.0, 101.0, 17.0, 101.0, 34.0, 50.0, 101.0, 24.0, 101.0, 101.0, 101.0, 5.0, 25.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 53.0, 44.0, 101.0, 101.0, 42.0, 101.0, 51.0, 81.0, 26.0, 101.0, 8.0, 4.0, 9.0, 101.0, 101.0, 21.0, 101.0, 36.0, 101.0, 101.0, 101.0, 7.0, 2.0, 101.0, 101.0, 2.0, 101.0, 101.0, 101.0, 1.0, 101.0, 28.0, 101.0, 86.0, 10.0, 49.0, 4.0, 42.0, 101.0, 101.0, 29.0, 101.0, 15.0, 101.0, 101.0, 101.0, 101.0, 10.0, 2.0, 101.0, 56.0, 4.0, 101.0, 101.0, 82.0, 101.0, 5.0, 1.0, 20.0, 101.0, 7.0, 101.0, 33.0, 82.0, 101.0, 20.0, 33.0, 47.0, 30.0, 101.0, 24.0, 71.0, 8.0, 101.0, 101.0, 15.0, 101.0, 8.0, 1.0, 101.0, 38.0, 16.0, 12.0, 30.0, 59.0, 101.0, 101.0, 101.0]
        assert list(rankings["rank"].fillna(101)) == desired_ranks

    def test_without_component(self):
        """
        Combination of poptf and transition, old method, without using CombinedComponent.
        The results are the same as above.
        """
        #base recommender 1: transition
        recommender1 = alpenglow.components.TransitionProbabilityComponent(
          mode="inverted"
        )
        recommender1.build()
        model1 = recommender1.get_object("model")
        updater1 = recommender1.get_object("updater")

        #base recommender 2: poptf
        recommender2 = alpenglow.components.PopularityComponent()
        updater2 = cpp.PopularityTimeFrameModelUpdater(
            tau = 600
        )
        recommender2.set_object("updater",updater2)
        recommender2.build()
        model2 = recommender2.get_object("model")

        #recommender: combined model
        cpp.collect()
        model = cpp.CombinedModel(
            log_frequency=0, #no logging
            use_user_weights=False
        )
        model.add_model(model1)
        model.add_model(model2)
        gradient_updater_c = cpp.CombinedDoubleLayerModelGradientUpdater(
            learning_rate = 0.05
        )
        gradient_updater_c.set_model(model)
        gradient_computer_c = cpp.GradientComputerPointWise()
        gradient_computer_c.set_model(model)
        gradient_computer_c.add_gradient_updater(gradient_updater_c)
        objective_c = cpp.ObjectiveMSE()
        gradient_computer_c.set_objective(objective_c)
        negative_sample_generator_c = cpp.UniformNegativeSampleGenerator(
            negative_rate = 10
        )
        negative_sample_generator_c.add_updater(gradient_computer_c)

        #online_experiment
        experiment = alpenglow.components.OnlineExperimentComponent(
            top_k = 100,
            seed = 254938879,
        )
        experiment.set_model(model)
        experiment.add_updater(negative_sample_generator_c)
        experiment.add_updater(updater1)
        experiment.add_updater(updater2)
        experiment.build()

        data = pd.read_csv(
            "python/test_alpenglow/test_data_4",
            sep=' ',
            header=None,
            names=['time', 'user', 'item', 'id', 'score', 'eval']
        )
        rankings = experiment.run(data, verbose=True, exclude_known=True)
        assert rankings.top_k == 100
        desired_ranks = [101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 5.0, 101.0, 101.0, 2.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 1.0, 101.0, 101.0, 3.0, 101.0, 101.0, 13.0, 1.0, 101.0, 101.0, 101.0, 28.0, 23.0, 101.0, 101.0, 101.0, 101.0, 101.0, 7.0, 2.0, 3.0, 101.0, 101.0, 4.0, 4.0, 11.0, 13.0, 101.0, 101.0, 10.0, 101.0, 31.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 19.0, 101.0, 2.0, 4.0, 11.0, 101.0, 101.0, 11.0, 101.0, 101.0, 101.0, 7.0, 101.0, 3.0, 101.0, 8.0, 101.0, 101.0, 14.0, 3.0, 101.0, 2.0, 3.0, 101.0, 16.0, 43.0, 101.0, 101.0, 101.0, 101.0, 14.0, 101.0, 48.0, 10.0, 4.0, 15.0, 101.0, 56.0, 9.0, 29.0, 1.0, 101.0, 6.0, 35.0, 101.0, 101.0, 101.0, 5.0, 6.0, 8.0, 1.0, 101.0, 4.0, 1.0, 101.0, 101.0, 2.0, 1.0, 17.0, 101.0, 101.0, 13.0, 5.0, 38.0, 101.0, 13.0, 26.0, 37.0, 101.0, 11.0, 64.0, 4.0, 101.0, 1.0, 101.0, 101.0, 59.0, 16.0, 20.0, 17.0, 2.0, 13.0, 5.0, 39.0, 9.0, 101.0, 101.0, 3.0, 101.0, 1.0, 7.0, 101.0, 7.0, 101.0, 101.0, 13.0, 10.0, 40.0, 15.0, 3.0, 101.0, 9.0, 101.0, 101.0, 59.0, 3.0, 101.0, 101.0, 101.0, 15.0, 101.0, 4.0, 8.0, 101.0, 2.0, 101.0, 101.0, 101.0, 66.0, 15.0, 101.0, 101.0, 18.0, 101.0, 1.0, 101.0, 2.0, 15.0, 53.0, 4.0, 101.0, 5.0, 11.0, 49.0, 101.0, 11.0, 2.0, 21.0, 7.0, 14.0, 10.0, 101.0, 101.0, 101.0, 101.0, 12.0, 101.0, 10.0, 4.0, 3.0, 101.0, 14.0, 15.0, 101.0, 1.0, 7.0, 3.0, 101.0, 14.0, 101.0, 101.0, 42.0, 101.0, 32.0, 1.0, 17.0, 30.0, 101.0, 1.0, 4.0, 27.0, 101.0, 6.0, 9.0, 44.0, 101.0, 101.0, 101.0, 101.0, 101.0, 10.0, 19.0, 101.0, 61.0, 30.0, 16.0, 6.0, 1.0, 101.0, 101.0, 6.0, 15.0, 101.0, 101.0, 101.0, 101.0, 10.0, 2.0, 9.0, 19.0, 101.0, 2.0, 101.0, 101.0, 3.0, 4.0, 7.0, 101.0, 39.0, 17.0, 101.0, 101.0, 9.0, 5.0, 2.0, 101.0, 8.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 14.0, 101.0, 18.0, 3.0, 2.0, 101.0, 101.0, 7.0, 101.0, 3.0, 7.0, 39.0, 101.0, 101.0, 45.0, 101.0, 101.0, 101.0, 101.0, 101.0, 2.0, 10.0, 63.0, 17.0, 2.0, 51.0, 27.0, 25.0, 101.0, 101.0, 101.0, 101.0, 15.0, 101.0, 11.0, 101.0, 21.0, 101.0, 1.0, 101.0, 63.0, 2.0, 5.0, 74.0, 101.0, 16.0, 12.0, 20.0, 6.0, 101.0, 101.0, 4.0, 101.0, 28.0, 11.0, 101.0, 1.0, 9.0, 7.0, 76.0, 19.0, 7.0, 21.0, 101.0, 7.0, 101.0, 8.0, 101.0, 101.0, 1.0, 21.0, 10.0, 43.0, 101.0, 1.0, 65.0, 7.0, 101.0, 34.0, 3.0, 15.0, 101.0, 69.0, 4.0, 101.0, 3.0, 6.0, 101.0, 5.0, 101.0, 101.0, 2.0, 5.0, 101.0, 20.0, 101.0, 9.0, 16.0, 101.0, 43.0, 7.0, 1.0, 101.0, 67.0, 29.0, 14.0, 5.0, 101.0, 101.0, 11.0, 101.0, 101.0, 44.0, 101.0, 101.0, 3.0, 49.0, 49.0, 29.0, 101.0, 21.0, 101.0, 101.0, 21.0, 3.0, 101.0, 15.0, 101.0, 101.0, 101.0, 101.0, 101.0, 3.0, 4.0, 101.0, 10.0, 23.0, 101.0, 101.0, 101.0, 14.0, 101.0, 101.0, 101.0, 101.0, 101.0, 8.0, 35.0, 22.0, 101.0, 3.0, 7.0, 101.0, 7.0, 6.0, 44.0, 101.0, 6.0, 4.0, 101.0, 2.0, 8.0, 4.0, 4.0, 101.0, 101.0, 12.0, 36.0, 59.0, 47.0, 101.0, 101.0, 101.0, 56.0, 101.0, 2.0, 11.0, 31.0, 7.0, 101.0, 101.0, 101.0, 25.0, 3.0, 19.0, 3.0, 37.0, 101.0, 1.0, 101.0, 6.0, 101.0, 37.0, 50.0, 101.0, 1.0, 101.0, 101.0, 101.0, 3.0, 101.0, 101.0, 101.0, 101.0, 101.0, 5.0, 101.0, 101.0, 9.0, 101.0, 101.0, 101.0, 101.0, 38.0, 101.0, 101.0, 4.0, 67.0, 18.0, 47.0, 101.0, 8.0, 101.0, 101.0, 101.0, 23.0, 101.0, 5.0, 101.0, 101.0, 10.0, 101.0, 101.0, 9.0, 13.0, 54.0, 101.0, 28.0, 101.0, 1.0, 12.0, 18.0, 14.0, 101.0, 4.0, 45.0, 57.0, 1.0, 101.0, 2.0, 101.0, 101.0, 31.0, 4.0, 101.0, 1.0, 7.0, 101.0, 101.0, 101.0, 16.0, 14.0, 101.0, 3.0, 101.0, 101.0, 57.0, 20.0, 13.0, 41.0, 101.0, 52.0, 101.0, 18.0, 101.0, 101.0, 30.0, 20.0, 101.0, 101.0, 101.0, 101.0, 1.0, 101.0, 48.0, 101.0, 14.0, 17.0, 101.0, 8.0, 101.0, 101.0, 101.0, 101.0, 8.0, 101.0, 101.0, 101.0, 46.0, 101.0, 101.0, 101.0, 5.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 43.0, 20.0, 101.0, 5.0, 101.0, 1.0, 36.0, 21.0, 7.0, 101.0, 14.0, 101.0, 21.0, 101.0, 101.0, 51.0, 23.0, 2.0, 101.0, 101.0, 101.0, 12.0, 7.0, 101.0, 27.0, 101.0, 55.0, 54.0, 101.0, 101.0, 101.0, 46.0, 6.0, 3.0, 101.0, 7.0, 101.0, 101.0, 101.0, 46.0, 12.0, 22.0, 10.0, 1.0, 44.0, 101.0, 101.0, 101.0, 101.0, 1.0, 19.0, 1.0, 101.0, 101.0, 30.0, 56.0, 29.0, 101.0, 101.0, 29.0, 101.0, 101.0, 13.0, 101.0, 13.0, 61.0, 17.0, 71.0, 60.0, 1.0, 11.0, 18.0, 10.0, 4.0, 101.0, 14.0, 20.0, 101.0, 101.0, 2.0, 101.0, 6.0, 101.0, 46.0, 2.0, 7.0, 101.0, 22.0, 12.0, 101.0, 101.0, 101.0, 101.0, 11.0, 62.0, 21.0, 101.0, 56.0, 9.0, 7.0, 6.0, 101.0, 43.0, 101.0, 101.0, 19.0, 21.0, 101.0, 101.0, 4.0, 6.0, 101.0, 101.0, 52.0, 101.0, 61.0, 14.0, 3.0, 10.0, 45.0, 6.0, 101.0, 101.0, 101.0, 16.0, 20.0, 101.0, 101.0, 31.0, 2.0, 10.0, 101.0, 8.0, 51.0, 10.0, 15.0, 101.0, 101.0, 7.0, 101.0, 10.0, 101.0, 101.0, 61.0, 101.0, 101.0, 25.0, 23.0, 101.0, 101.0, 101.0, 101.0, 20.0, 59.0, 5.0, 101.0, 23.0, 1.0, 101.0, 41.0, 6.0, 12.0, 1.0, 101.0, 101.0, 13.0, 12.0, 78.0, 8.0, 101.0, 45.0, 9.0, 101.0, 101.0, 4.0, 38.0, 18.0, 101.0, 53.0, 6.0, 101.0, 101.0, 16.0, 1.0, 6.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 6.0, 4.0, 17.0, 101.0, 10.0, 2.0, 8.0, 30.0, 10.0, 101.0, 38.0, 101.0, 33.0, 1.0, 2.0, 17.0, 61.0, 9.0, 4.0, 101.0, 11.0, 18.0, 101.0, 1.0, 18.0, 52.0, 101.0, 3.0, 45.0, 101.0, 1.0, 101.0, 3.0, 5.0, 101.0, 101.0, 101.0, 101.0, 10.0, 101.0, 1.0, 101.0, 59.0, 17.0, 101.0, 101.0, 28.0, 3.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 6.0, 21.0, 9.0, 28.0, 101.0, 101.0, 56.0, 13.0, 14.0, 10.0, 3.0, 6.0, 24.0, 101.0, 49.0, 101.0, 101.0, 50.0, 8.0, 22.0, 23.0, 56.0, 101.0, 101.0, 101.0, 101.0, 3.0, 23.0, 10.0, 101.0, 23.0, 101.0, 22.0, 101.0, 101.0, 6.0, 25.0, 19.0, 101.0, 1.0, 8.0, 29.0, 49.0, 3.0, 5.0, 8.0, 101.0, 101.0, 101.0, 17.0, 101.0, 34.0, 50.0, 101.0, 24.0, 101.0, 101.0, 101.0, 5.0, 25.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 101.0, 53.0, 44.0, 101.0, 101.0, 42.0, 101.0, 51.0, 81.0, 26.0, 101.0, 8.0, 4.0, 9.0, 101.0, 101.0, 21.0, 101.0, 36.0, 101.0, 101.0, 101.0, 7.0, 2.0, 101.0, 101.0, 2.0, 101.0, 101.0, 101.0, 1.0, 101.0, 28.0, 101.0, 86.0, 10.0, 49.0, 4.0, 42.0, 101.0, 101.0, 29.0, 101.0, 15.0, 101.0, 101.0, 101.0, 101.0, 10.0, 2.0, 101.0, 56.0, 4.0, 101.0, 101.0, 82.0, 101.0, 5.0, 1.0, 20.0, 101.0, 7.0, 101.0, 33.0, 82.0, 101.0, 20.0, 33.0, 47.0, 30.0, 101.0, 24.0, 71.0, 8.0, 101.0, 101.0, 15.0, 101.0, 8.0, 1.0, 101.0, 38.0, 16.0, 12.0, 30.0, 59.0, 101.0, 101.0, 101.0]
        assert list(rankings["rank"].fillna(101)) == desired_ranks
        
