import alpenglow.components.PopularityComponent
import alpenglow.components.OnlineExperimentComponent
import alpenglow.Getter as ag
import pandas as pd

class TestOnlineExperimentComponent:
    def test_experiment(self):
        recommender = alpenglow.components.PopularityComponent()
        poptf_updater = ag.PopularityTimeFrameModelUpdater(
            tau = 600
        )
        recommender.set_object("updater",poptf_updater)
        recommender.build()
        model = recommender.get_object("model")

        experiment = alpenglow.components.OnlineExperimentComponent(
            top_k = 100,
            seed = 254938879,
        )
        experiment.set_model(model)
        experiment.set_updater(poptf_updater)
        experiment.build()

        data = pd.read_csv(
            "python/test_alpenglow/test_data_4",
            sep=' ',
            header=None,
            names=['time', 'user', 'item', 'id', 'score', 'eval']
        )
        rankings = experiment.run(data, verbose=True, exclude_known=True)
        assert rankings.top_k == 100
        desired_ranks = [102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 4, 102, 102, 1, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 0, 102, 102, 2, 102, 102, 12, 0, 102, 102, 102, 27, 22, 102, 102, 102, 102, 102, 6, 1, 2, 102, 102, 3, 2, 10, 12, 102, 102, 8, 102, 30, 102, 102, 102, 102, 102, 102, 18, 102, 0, 2, 9, 102, 102, 10, 102, 102, 102, 6, 102, 2, 102, 6, 102, 102, 13, 0, 102, 1, 0, 102, 15, 42, 102, 102, 102, 102, 13, 102, 47, 9, 3, 14, 102, 55, 7, 27, 1, 102, 6, 26, 102, 102, 102, 4, 5, 5, 0, 102, 4, 0, 102, 102, 5, 1, 10, 102, 102, 12, 3, 25, 102, 10, 57, 66, 102, 9, 59, 3, 102, 1, 102, 102, 16, 11, 60, 15, 0, 9, 4, 53, 6, 102, 102, 0, 102, 0, 2, 102, 6, 102, 102, 14, 9, 31, 15, 2, 102, 5, 102, 102, 15, 3, 102, 102, 102, 32, 102, 4, 7, 102, 1, 102, 102, 102, 59, 12, 102, 102, 14, 102, 4, 102, 13, 13, 55, 5, 102, 7, 8, 25, 102, 7, 102, 19, 7, 13, 10, 102, 102, 102, 102, 11, 102, 5, 1, 1, 102, 19, 17, 102, 1, 3, 2, 102, 7, 102, 102, 27, 102, 58, 1, 19, 48, 102, 2, 2, 51, 102, 4, 5, 32, 102, 102, 102, 102, 102, 3, 19, 102, 46, 36, 13, 4, 11, 102, 102, 3, 13, 102, 102, 102, 102, 12, 0, 10, 20, 102, 2, 102, 102, 1, 0, 8, 102, 41, 15, 102, 102, 14, 12, 3, 102, 9, 102, 102, 102, 102, 102, 102, 102, 9, 102, 12, 2, 0, 102, 102, 10, 102, 1, 5, 19, 102, 102, 45, 102, 102, 102, 102, 102, 0, 8, 34, 17, 1, 31, 59, 38, 102, 102, 102, 102, 7, 102, 5, 102, 61, 102, 1, 102, 22, 0, 4, 74, 102, 13, 8, 20, 0, 102, 102, 9, 102, 37, 6, 102, 3, 5, 3, 71, 15, 10, 12, 102, 1, 102, 5, 102, 102, 4, 14, 2, 44, 102, 1, 22, 7, 102, 70, 18, 13, 102, 74, 3, 102, 0, 4, 102, 3, 102, 102, 0, 3, 102, 36, 102, 5, 9, 102, 31, 1, 0, 102, 54, 56, 12, 102, 102, 102, 7, 102, 102, 26, 102, 102, 2, 45, 45, 48, 102, 58, 102, 102, 12, 0, 102, 7, 102, 102, 102, 102, 102, 1, 4, 102, 3, 49, 102, 102, 102, 47, 102, 102, 102, 102, 102, 3, 33, 15, 102, 2, 6, 102, 11, 12, 28, 102, 0, 1, 102, 23, 2, 0, 2, 102, 102, 11, 33, 39, 67, 102, 102, 102, 48, 102, 4, 5, 35, 4, 102, 102, 102, 53, 0, 13, 0, 17, 102, 0, 102, 19, 102, 44, 34, 102, 6, 102, 102, 102, 3, 102, 102, 102, 102, 102, 1, 102, 102, 1, 102, 102, 102, 102, 57, 102, 102, 1, 45, 7, 34, 102, 3, 102, 102, 102, 10, 102, 2, 102, 102, 102, 102, 102, 8, 9, 28, 102, 55, 102, 1, 0, 12, 20, 102, 0, 72, 29, 3, 102, 2, 102, 102, 29, 2, 102, 0, 7, 102, 102, 102, 17, 16, 102, 1, 102, 102, 36, 20, 7, 50, 102, 37, 102, 14, 102, 102, 15, 13, 102, 102, 102, 102, 1, 102, 57, 102, 1, 11, 102, 0, 102, 102, 102, 102, 102, 102, 102, 102, 50, 102, 102, 102, 7, 102, 102, 102, 102, 102, 102, 47, 9, 102, 0, 102, 2, 64, 12, 2, 102, 3, 102, 15, 102, 102, 40, 8, 7, 102, 102, 102, 7, 8, 102, 59, 102, 57, 45, 102, 102, 102, 16, 0, 15, 102, 15, 102, 102, 102, 39, 8, 14, 7, 0, 31, 102, 102, 102, 102, 0, 18, 0, 102, 102, 65, 50, 45, 102, 102, 54, 102, 102, 10, 102, 4, 58, 20, 52, 26, 5, 15, 9, 0, 2, 102, 44, 18, 102, 102, 0, 102, 18, 102, 38, 3, 0, 102, 19, 7, 102, 102, 102, 102, 3, 30, 13, 102, 34, 7, 3, 2, 102, 56, 102, 102, 55, 11, 102, 102, 6, 8, 102, 102, 18, 102, 50, 8, 1, 8, 25, 102, 102, 102, 102, 12, 30, 102, 102, 73, 17, 6, 102, 6, 30, 9, 8, 102, 102, 8, 102, 3, 102, 102, 16, 102, 102, 102, 62, 102, 102, 102, 102, 11, 23, 5, 102, 10, 1, 102, 15, 2, 11, 0, 102, 102, 13, 4, 37, 6, 102, 64, 6, 102, 102, 1, 20, 16, 102, 44, 44, 102, 102, 14, 5, 15, 102, 102, 102, 102, 102, 102, 4, 2, 26, 102, 59, 4, 10, 32, 9, 102, 63, 102, 32, 2, 16, 12, 44, 7, 6, 102, 11, 15, 102, 0, 6, 44, 102, 1, 64, 102, 9, 102, 0, 3, 102, 102, 102, 102, 7, 102, 0, 102, 24, 7, 102, 102, 41, 0, 102, 102, 102, 102, 102, 102, 102, 1, 28, 51, 56, 102, 102, 15, 7, 7, 3, 17, 32, 15, 102, 54, 102, 102, 38, 7, 25, 54, 58, 102, 102, 102, 102, 2, 18, 65, 102, 20, 102, 26, 102, 102, 7, 19, 17, 102, 5, 24, 31, 47, 0, 30, 42, 102, 102, 102, 14, 102, 56, 22, 102, 14, 102, 102, 102, 29, 47, 102, 102, 102, 102, 102, 102, 102, 13, 28, 102, 102, 57, 102, 23, 70, 16, 102, 54, 20, 9, 102, 102, 16, 102, 64, 102, 102, 102, 70, 102, 102, 102, 27, 102, 102, 102, 24, 102, 42, 102, 39, 17, 30, 7, 28, 102, 102, 25, 102, 10, 102, 102, 102, 102, 4, 102, 102, 29, 7, 102, 102, 30, 102, 13, 0, 14, 102, 102, 102, 40, 70, 102, 3, 9, 13, 20, 102, 14, 79, 59, 102, 102, 20, 102, 0, 6, 102, 42, 4, 4, 54, 30, 102, 102, 102]
        desired_ranks = list(map(lambda i: i + 1 if i < 100 else 101, desired_ranks))
        assert list(rankings["rank"].fillna(101)) == desired_ranks

