import os

extra_cpppath = []
if 'CPATH' in os.environ:
    extra_cpppath = filter(bool, os.environ['CPATH'].split(os.pathsep))

env = Environment(
    CXX="g++",
    CCFLAGS=[
        '-std=c++11',
        '-Wall',
        #'-O3',
        #'-ggdb',
        '-fPIC',
        '-Wno-deprecated',
        '-Wno-reorder',
        #'-Wsuggest-override',
        '-mfpmath=sse,387',
        '-funroll-loops',
        '-fomit-frame-pointer',
        '-lpthread',
        '-msse3',
        '-D_LARGEFILE_SOURCE',
        '-D_FILE_OFFSET_BITS=64'
        #, '-fprofile-arcs',
        #'-ftest-coverage'
    ],
    #LDFLAGS=[
    #    '-lgcov',
    #    '-fprofile-arcs'
    #],
    CPPPATH=['#.', '#../dep/gtest/include','#../dep']+extra_cpppath,
    LIBPATH=['#../dep/gtest/build', '/usr/local/lib'],
    LIBS=[
      'gtest',
      'pthread'
      #, 'gcov'
    ]
)

AddOption('--mode',
          dest='mode',
          type='string',
          nargs=1,
          default='debug',
          action='store',
          metavar='DIR',
          help='modifies compile flags, possible values: debug (default), optimized, coverage')

mode_raw = GetOption('mode')
mode = mode_raw if mode_raw is not None else "debug"

#documentation: compile in coverage mode using
#scons [-j30] --mode=coverage
#available modes: coverage, debug (default), optimized, travis

if mode!="travis": #Travis uses or used some old g++ compiler, that did not know this option
  env.Append(CCFLAGS = '-Wsuggest-override')
if mode=="debug":
  env.Append(CCFLAGS = '-ggdb')
if mode=="optimized":
  env.Append(CCFLAGS = '-O3')
if mode=="coverage":
  env.Append(CCFLAGS = '-fprofile-arcs')
  env.Append(CCFLAGS = '-ftest-coverage')
  env.Append(LIBS = 'gcov')
  env.Append(LDFLAGS='-lgcov')
  env.Append(LDFLAGS='-fprofile-arcs')

cpp = Glob("main/*/*.cpp")
cpp.extend(Glob("main/*/*/*.cpp"))
cpp.extend(Glob("main/*/*/*/*.cpp"))
objs = env.Object(cpp)

cpp_test = Glob("test/*/*.cpp")
cpp_test.extend(Glob("test/*/*/*.cpp"))
cpp_test.extend(Glob("test/*/*/*/*.cpp"))

AddOption('--test-filter',
          dest='test-filter',
          type='string',
          nargs=1,
          action='store',
          metavar='DIR',
          help='filter to these tests, comma separated (no space)')

test_filter_raw = GetOption('test-filter')
test_filter = set(test_filter_raw.split(',')) if test_filter_raw is not None else None

for src in cpp_test:
    src_str = str(src)
    relative_path = os.path.relpath(src_str, os.path.commonprefix([src_str, Dir('#').abspath]))
    env.Object(relative_path)
    program_name = os.path.basename(os.path.splitext(relative_path)[0])
    if test_filter is None or program_name in test_filter:
        env.Program("test/"+program_name, [relative_path]+['#../bin/'+str(i) for i in objs])
